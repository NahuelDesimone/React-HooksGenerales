{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useRef, useState } from \"react\";\nexport const useFetch = url => {\n  _s();\n\n  const estaMontado = useRef(true);\n  const [state, setState] = useState({\n    data: null,\n    loading: true,\n    error: null\n  });\n  useEffect(() => {\n    setState({ ...state,\n      loading: true\n    });\n    fetch(url).then(resp => resp.json()).then(data => {\n      setTimeout(() => {\n        setState({ ...state,\n          loading: false,\n          error: null,\n          data\n        });\n      }, 4000);\n    });\n  }, [url]);\n  return state;\n};\n\n_s(useFetch, \"PLAMWBkXlA3djXGUAXda1r49voQ=\");","map":{"version":3,"sources":["/Users/nahueldesimone/Documents/Repos/React-HooksGenerales/src/hooks/useFetch.js"],"names":["useEffect","useRef","useState","useFetch","url","estaMontado","state","setState","data","loading","error","fetch","then","resp","json","setTimeout"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,MAApB,EAA4BC,QAA5B,QAA4C,OAA5C;AAEA,OAAO,MAAMC,QAAQ,GAAIC,GAAD,IAAS;AAAA;;AAE7B,QAAMC,WAAW,GAAGJ,MAAM,CAAC,IAAD,CAA1B;AAEA,QAAM,CAACK,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAC;AAAEM,IAAAA,IAAI,EAAE,IAAR;AAAcC,IAAAA,OAAO,EAAE,IAAvB;AAA6BC,IAAAA,KAAK,EAAE;AAApC,GAAD,CAAlC;AAEAV,EAAAA,SAAS,CAAC,MAAM;AAEZO,IAAAA,QAAQ,CAAC,EACL,GAAGD,KADE;AAELG,MAAAA,OAAO,EAAE;AAFJ,KAAD,CAAR;AAKAE,IAAAA,KAAK,CAACP,GAAD,CAAL,CACKQ,IADL,CACUC,IAAI,IAAIA,IAAI,CAACC,IAAL,EADlB,EAEKF,IAFL,CAEUJ,IAAI,IAAI;AAGVO,MAAAA,UAAU,CAAC,MAAM;AACbR,QAAAA,QAAQ,CAAC,EACL,GAAGD,KADE;AAELG,UAAAA,OAAO,EAAE,KAFJ;AAGLC,UAAAA,KAAK,EAAE,IAHF;AAILF,UAAAA;AAJK,SAAD,CAAR;AAMH,OAPS,EAOP,IAPO,CAAV;AAQH,KAbL;AAcH,GArBQ,EAqBN,CAACJ,GAAD,CArBM,CAAT;AAuBA,SAAOE,KAAP;AACH,CA9BM;;GAAMH,Q","sourcesContent":["import { useEffect, useRef, useState } from \"react\"\n\nexport const useFetch = (url) => {\n\n    const estaMontado = useRef(true);\n\n    const [state, setState] = useState({ data: null, loading: true, error: null });\n\n    useEffect(() => {\n\n        setState({\n            ...state,\n            loading: true\n        })\n\n        fetch(url)\n            .then(resp => resp.json())\n            .then(data => {\n\n\n                setTimeout(() => {\n                    setState({\n                        ...state,\n                        loading: false,\n                        error: null,\n                        data\n                    })\n                }, 4000)\n            })\n    }, [url])\n\n    return state;\n}\n"]},"metadata":{},"sourceType":"module"}